--                                 A. Double Cola
--
-- Шелдон, Леонард, Пенни, Раджеш и Говард стоят в очереди к автомату 
-- по продаже баночек с напитком «Double Cola», других людей в очереди 
-- нет. Первый в очереди (Шелдон) покупает баночку, выпивает ее содержимое 
-- и раздваивается! Получившиеся два Шелдона встают в конец очереди. Затем 
-- следующий в очереди (Леонард) покупает баночку, выпивает и встает в 
-- конец очереди в двойном экземпляре, и так далее. Этот процесс продолжается 
-- до бесконечности.
--
-- Например, третью баночку колы выпьет Пенни, и очередь будет выглядеть так: 
-- Раджеш, Говард, Шелдон, Шелдон, Леонард, Леонард, Пенни, Пенни.
--
-- Напишите программу, которая выведет имя человека, выпившего n-ую баночку.
--
-- Обратите внимание, что в самом начале очередь выглядит так: Шелдон, 
-- Леонард, Пенни, Раджеш, Говард. Первым человеком является Шелдон.
--
-- Входные данные
--
-- Входные данные состоят из единственного целого числа n (1???n???109).
--
-- Гарантируется, что в претестах проверяется правильность написания всех 
-- пяти имен, то есть в них встречаются все пять возможных ответов.
--
-- Выходные данные
--
-- Выведите единственную строку — имя человека, который выпьет n-ую баночку 
-- колы. Баночки нумеруются от 1. Обратите внимание, что следует выводить 
-- имена в следующем написании: "Sheldon", "Leonard", "Penny", "Rajesh", 
-- "Howard" (без кавычек). Именно в этом порядке друзья стоят в очереди 
-- изначально.
--
-- Примеры тестов
--
-- Входные данные
--  1
--
-- Выходные данные
--  Sheldon
--
-- Входные данные
--  6
--
-- Выходные данные
--  Sheldon
--
-- Входные данные
--  1802
--
-- Выходные данные
--  Penny

toInt :: String -> Int
toInt = read

personIdRange :: Int -> [ ( Int, Int ) ]
personIdRange n	=  	zip ( scanl (+) 1 (lst 0) ) ( scanl (+) n (lst 1) )
					where lst from 	= [ n * 2^x  | x <- enumFrom from ]

between :: Int -> ( Int, Int ) -> Bool
between x (left, right) = if left <= x && x <= right then True else False

nthPerson :: Int -> String
nthPerson n = nameList !! ( findPerson (personIdRange 5) )
			where
				nameList 			= [ "Sheldon", "Leonard", "Penny", "Rajesh", "Howard" ]
				findPerson (x:xs)	| between n x 	= ( 5 * (n - fst x) ) `div` (snd x - fst x + 1)
									| otherwise 	= findPerson xs	
main = do
	str <- getLine
	putStrLn $ ( nthPerson  . toInt ) str






