#                                 A. Double Cola
#
# Шелдон, Леонард, Пенни, Раджеш и Говард стоят в очереди к автомату 
# по продаже баночек с напитком «Double Cola», других людей в очереди 
# нет. Первый в очереди (Шелдон) покупает баночку, выпивает ее содержимое 
# и раздваивается! Получившиеся два Шелдона встают в конец очереди. Затем 
# следующий в очереди (Леонард) покупает баночку, выпивает и встает в 
# конец очереди в двойном экземпляре, и так далее. Этот процесс продолжается 
# до бесконечности.
#
# Например, третью баночку колы выпьет Пенни, и очередь будет выглядеть так: 
# Раджеш, Говард, Шелдон, Шелдон, Леонард, Леонард, Пенни, Пенни.
#
# Напишите программу, которая выведет имя человека, выпившего n-ую баночку.
#
# Обратите внимание, что в самом начале очередь выглядит так: Шелдон, 
# Леонард, Пенни, Раджеш, Говард. Первым человеком является Шелдон.
#
# Входные данные
#
# Входные данные состоят из единственного целого числа n (1 ≤ n ≤ 109).
#
# Гарантируется, что в претестах проверяется правильность написания всех 
# пяти имен, то есть в них встречаются все пять возможных ответов.
#
# Выходные данные
#
# Выведите единственную строку — имя человека, который выпьет n-ую баночку 
# колы. Баночки нумеруются от 1. Обратите внимание, что следует выводить 
# имена в следующем написании: "Sheldon", "Leonard", "Penny", "Rajesh", 
# "Howard" (без кавычек). Именно в этом порядке друзья стоят в очереди 
# изначально.
#
# Примеры тестов
#
# Входные данные
#  1
#
# Выходные данные
#  Sheldon
#
# Входные данные
#  6
#
# Выходные данные
#  Sheldon
#
# Входные данные
#  1802
#
# Выходные данные
#  Penny

max_n = 1000000

class IE:
    
   def __init__(self, how_many):
      self.prv = 0
      self.nxt = how_many
   
   def next(self):
      self.ret = ( self.prv, self.nxt )
      self.tmp = 2 * ( self.nxt - self.prv )   
      self.prv = self.nxt
      self.nxt += self.tmp
      return self.ret
    
   def __iter__(self):
      return self
    
n = int( raw_input() ) - 1
names = { 0 : 'Sheldon', 1 : 'Leonard', 2 : 'Penny', 3 : 'Rajesh', 4 : 'Howard' }

a = IE( len( names ) )

prv, nxt = a.next()
while True:
   if prv <= n < nxt:
      break
   else:
      prv, nxt = a.next()

x = len(names) * ( n - prv ) / ( nxt - prv )
print names[ x ]
